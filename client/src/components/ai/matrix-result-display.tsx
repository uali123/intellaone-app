import React from 'react';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Download, Copy } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface MatrixOutput {
  headline: string;
  tagline?: string;
  value_proposition?: string;
  key_messages?: string[];
  call_to_action?: string;
  tone_notes?: string;
}

export default function MatrixResultDisplay({ result }: { result: MatrixOutput }) {
  const { toast } = useToast();
  
  const copyToClipboard = () => {
    if (!result) return;
    
    const textToCopy = `
# ${result.headline}
${result.tagline ? `## ${result.tagline}\n` : ''}
${result.value_proposition ? `${result.value_proposition}\n\n` : ''}
${result.key_messages && result.key_messages.length > 0 ? 
  `### Key Messages:\n${result.key_messages.map((msg: string) => `â€¢ ${msg}`).join('\n')}\n\n` : ''}
${result.call_to_action ? `### Call to Action:\n${result.call_to_action}\n\n` : ''}
${result.tone_notes ? `### Tone Notes:\n${result.tone_notes}` : ''}
    `.trim();

    navigator.clipboard.writeText(textToCopy)
      .then(() => {
        toast({
          title: "Copied to clipboard",
          description: "Content has been copied to your clipboard",
        });
      })
      .catch(() => {
        toast({
          title: "Copy failed",
          description: "Failed to copy content to clipboard",
          variant: "destructive",
        });
      });
  };

  const downloadAsHTML = () => {
    if (!result || !result.headline) return;
    
    const element = document.createElement("a");
    const content = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${result.headline}</title>
  <style>
    body {
      font-family: 'Arial', sans-serif;
      line-height: 1.6;
      color: #333;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
    }
    .container {
      border: 1px solid #e2e8f0;
      border-radius: 8px;
      padding: 30px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .headline {
      font-size: 28px;
      font-weight: bold;
      color: #2d3748;
      margin-bottom: 10px;
    }
    .tagline {
      font-size: 20px;
      color: #4a5568;
      margin-bottom: 20px;
      font-style: italic;
    }
    .value-proposition {
      font-size: 16px;
      margin-bottom: 25px;
      line-height: 1.8;
    }
    .key-messages {
      margin-bottom: 25px;
    }
    .key-messages h3 {
      font-size: 18px;
      color: #2d3748;
      margin-bottom: 10px;
    }
    .key-messages ul {
      padding-left: 20px;
    }
    .key-messages li {
      margin-bottom: 10px;
    }
    .cta {
      font-size: 18px;
      font-weight: bold;
      color: #2c5282;
      margin: 25px 0;
    }
    .tone-notes {
      background-color: #f7fafc;
      padding: 15px;
      border-radius: 6px;
      font-size: 14px;
      color: #718096;
      margin-top: 30px;
    }
    .footer {
      margin-top: 30px;
      font-size: 12px;
      color: #a0aec0;
      text-align: center;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="headline">${result.headline}</div>
    ${result.tagline ? `<div class="tagline">${result.tagline}</div>` : ''}
    
    ${result.value_proposition ? `
    <div class="value-proposition">
      ${result.value_proposition}
    </div>
    ` : ''}
    
    ${result.key_messages && result.key_messages.length > 0 ? `
    <div class="key-messages">
      <h3>Key Messages</h3>
      <ul>
        ${result.key_messages.map((message: string) => `<li>${message}</li>`).join('')}
      </ul>
    </div>
    ` : ''}
    
    ${result.call_to_action ? `
    <div class="cta">
      ${result.call_to_action}
    </div>
    ` : ''}
    
    ${result.tone_notes ? `
    <div class="tone-notes">
      <strong>Tone Notes:</strong><br>
      ${result.tone_notes}
    </div>
    ` : ''}
    
    <div class="footer">
      Generated by IntellaOne Marketing Platform - ${new Date().toLocaleDateString()}
    </div>
  </div>
</body>
</html>
    `;

    const file = new Blob([content], { type: 'text/html' });
    element.href = URL.createObjectURL(file);
    element.download = `${result.headline.substring(0, 20).replace(/[^a-z0-9]/gi, '_').toLowerCase()}_messaging.html`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);

    toast({
      title: "Downloaded successfully",
      description: "Content has been downloaded as an HTML file",
    });
  };

  if (!result || !result.headline) {
    return null;
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="text-xl">{result.headline}</CardTitle>
        {result.tagline && <CardDescription className="italic">{result.tagline}</CardDescription>}
      </CardHeader>
      <CardContent className="space-y-4">
        {result.value_proposition && (
          <div>
            <h3 className="text-sm font-semibold uppercase text-muted-foreground mb-1">Value Proposition</h3>
            <p>{result.value_proposition}</p>
          </div>
        )}
        
        {result.key_messages && result.key_messages.length > 0 && (
          <div>
            <h3 className="text-sm font-semibold uppercase text-muted-foreground mb-1">Key Messages</h3>
            <ul className="ml-5 space-y-1 list-disc">
              {result.key_messages.map((message, idx) => (
                <li key={idx}>{message}</li>
              ))}
            </ul>
          </div>
        )}
        
        {result.call_to_action && (
          <div>
            <h3 className="text-sm font-semibold uppercase text-muted-foreground mb-1">Call to Action</h3>
            <p className="font-medium text-primary">{result.call_to_action}</p>
          </div>
        )}
        
        {result.tone_notes && (
          <div className="mt-4 p-3 bg-muted/30 rounded-md">
            <h3 className="text-xs font-semibold uppercase text-muted-foreground mb-1">Tone Notes</h3>
            <p className="text-sm">{result.tone_notes}</p>
          </div>
        )}
      </CardContent>
      <CardFooter className="flex justify-end gap-2">
        <Button variant="outline" size="sm" onClick={copyToClipboard}>
          <Copy className="h-4 w-4 mr-2" /> Copy Text
        </Button>
        <Button variant="outline" size="sm" onClick={downloadAsHTML}>
          <Download className="h-4 w-4 mr-2" /> Download HTML
        </Button>
      </CardFooter>
    </Card>
  );
}