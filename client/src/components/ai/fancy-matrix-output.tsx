import React from 'react';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Download, Copy } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface MatrixOutput {
  headline: string;
  tagline: string;
  value_proposition: string;
  key_messages: string[];
  call_to_action: string;
  tone_notes?: string;
}

interface FancyMatrixOutputProps {
  data: MatrixOutput;
}

export default function FancyMatrixOutput({ data }: FancyMatrixOutputProps) {
  const { toast } = useToast();
  
  const copyToClipboard = () => {
    const textToCopy = `
# ${data.headline}
## ${data.tagline}

${data.value_proposition}

### Key Messages:
${data.key_messages.map((msg: string) => `â€¢ ${msg}`).join('\n')}

### Call to Action:
${data.call_to_action}

${data.tone_notes ? `\n### Tone Notes:\n${data.tone_notes}` : ''}
    `.trim();

    navigator.clipboard.writeText(textToCopy)
      .then(() => {
        toast({
          title: "Copied to clipboard",
          description: "The content has been copied to your clipboard.",
        });
      })
      .catch(() => {
        toast({
          title: "Copy failed",
          description: "Failed to copy content to clipboard.",
          variant: "destructive",
        });
      });
  };

  const downloadAsHTML = () => {
    const element = document.createElement("a");
    const content = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${data.headline}</title>
  <style>
    body {
      font-family: 'Arial', sans-serif;
      line-height: 1.6;
      color: #333;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
    }
    .container {
      border: 1px solid #e2e8f0;
      border-radius: 8px;
      padding: 30px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .headline {
      font-size: 28px;
      font-weight: bold;
      color: #2d3748;
      margin-bottom: 10px;
    }
    .tagline {
      font-size: 20px;
      color: #4a5568;
      margin-bottom: 20px;
      font-style: italic;
    }
    .value-proposition {
      font-size: 16px;
      margin-bottom: 25px;
      line-height: 1.8;
    }
    .key-messages {
      margin-bottom: 25px;
    }
    .key-messages h3 {
      font-size: 18px;
      color: #2d3748;
      margin-bottom: 10px;
    }
    .key-messages ul {
      padding-left: 20px;
    }
    .key-messages li {
      margin-bottom: 10px;
    }
    .cta {
      font-size: 18px;
      font-weight: bold;
      color: #2c5282;
      margin: 25px 0;
    }
    .tone-notes {
      background-color: #f7fafc;
      padding: 15px;
      border-radius: 6px;
      font-size: 14px;
      color: #718096;
      margin-top: 30px;
    }
    .footer {
      margin-top: 30px;
      font-size: 12px;
      color: #a0aec0;
      text-align: center;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="headline">${data.headline}</div>
    <div class="tagline">${data.tagline}</div>
    
    <div class="value-proposition">
      ${data.value_proposition}
    </div>
    
    <div class="key-messages">
      <h3>Key Messages</h3>
      <ul>
        ${data.key_messages.map((message: string) => `<li>${message}</li>`).join('')}
      </ul>
    </div>
    
    <div class="cta">
      ${data.call_to_action}
    </div>
    
    ${data.tone_notes ? `
    <div class="tone-notes">
      <strong>Tone Notes:</strong><br>
      ${data.tone_notes}
    </div>
    ` : ''}
    
    <div class="footer">
      Generated by IntellaOne Marketing Platform - ${new Date().toLocaleDateString()}
    </div>
  </div>
</body>
</html>
    `;

    const file = new Blob([content], { type: 'text/html' });
    element.href = URL.createObjectURL(file);
    element.download = `${data.headline.substring(0, 20).replace(/[^a-z0-9]/gi, '_').toLowerCase()}_messaging.html`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);

    toast({
      title: "Downloaded successfully",
      description: "The content has been downloaded as an HTML file.",
    });
  };

  return (
    <Card className="overflow-hidden">
      <CardHeader className="pb-2 bg-muted/30">
        <CardTitle className="text-xl font-bold">{data.headline}</CardTitle>
        <CardDescription className="text-md italic">{data.tagline}</CardDescription>
      </CardHeader>
      <CardContent className="space-y-6 pt-6">
        <div>
          <h3 className="text-sm uppercase font-semibold text-muted-foreground mb-2">Value Proposition</h3>
          <p>{data.value_proposition}</p>
        </div>
        
        <div>
          <h3 className="text-sm uppercase font-semibold text-muted-foreground mb-2">Key Messages</h3>
          <ul className="ml-5 space-y-2 list-disc">
            {data.key_messages.map((message, idx) => (
              <li key={idx}>{message}</li>
            ))}
          </ul>
        </div>
        
        <div>
          <h3 className="text-sm uppercase font-semibold text-muted-foreground mb-2">Call to Action</h3>
          <p className="font-medium text-primary">{data.call_to_action}</p>
        </div>
        
        {data.tone_notes && (
          <div className="mt-6 p-4 bg-muted/30 rounded-md">
            <h3 className="text-xs uppercase font-semibold text-muted-foreground mb-2">Tone Notes</h3>
            <p className="text-sm">{data.tone_notes}</p>
          </div>
        )}
      </CardContent>
      <CardFooter className="flex justify-end gap-2 bg-muted/20 pt-4">
        <Button variant="outline" size="sm" onClick={copyToClipboard}>
          <Copy className="h-4 w-4 mr-2" /> Copy Text
        </Button>
        <Button variant="outline" size="sm" onClick={downloadAsHTML}>
          <Download className="h-4 w-4 mr-2" /> Download HTML
        </Button>
      </CardFooter>
    </Card>
  );
}